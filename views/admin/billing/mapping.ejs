<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="theme-color" content="#007bff">
    <title><%= title || 'Network Mapping' %> - <%= typeof isTechnicianView !== 'undefined' && isTechnicianView ? 'Portal Teknisi' : 'Admin Portal' %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        #map {
            height: 70vh;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .map-controls {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .customer-marker {
            background-color: #28a745;
            border: 2px solid white;
            border-radius: 50%;
            width: 12px;
            height: 12px;
            cursor: pointer;
        }
        
        .onu-marker {
            background-color: #007bff;
            border: 2px solid white;
            border-radius: 50%;
            width: 10px;
            height: 10px;
            cursor: pointer;
        }
        
        .offline-marker {
            background-color: #dc3545;
            border: 2px solid white;
            border-radius: 50%;
            width: 10px;
            height: 10px;
            cursor: pointer;
        }
        
        .marker-cluster {
            background-color: #ffc107;
            border: 2px solid white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: bold;
        }
        
        .info-panel {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .stats-number {
            font-size: 2rem;
            font-weight: bold;
        }
        
        .legend {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            margin-right: 10px;
            border: 2px solid white;
        }
        
        .coordinate-stats {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            border: 1px solid #dee2e6;
        }
        
        .coordinate-stats h6 {
            color: #495057;
            margin-bottom: 15px;
            font-weight: 600;
        }
        
        .coordinate-stats .badge {
            font-size: 1.2em;
            padding: 8px 12px;
        }
        
        .coordinate-stats .small {
            color: #6c757d;
        }

        /* Mobile Responsive Styles untuk Mapping */
        @media (max-width: 768px) {
            .main-content {
                padding: 10px !important;
                margin-left: 0 !important;
            }
            
            #map {
                height: 50vh;
                margin-bottom: 15px;
            }
            
            .stats-card {
                padding: 15px;
                margin-bottom: 15px;
            }
            
            .stats-number {
                font-size: 1.5rem;
            }
            
            .map-controls {
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .map-controls .row > div {
                margin-bottom: 10px;
            }
            
            .coordinate-stats {
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .legend {
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .info-panel {
                padding: 15px;
                margin-bottom: 15px;
            }
            
            /* Mobile-specific button sizes */
            .btn {
                padding: 8px 16px;
                font-size: 14px;
                min-height: 42px;
                touch-action: manipulation;
            }
            
            .btn-sm {
                padding: 6px 12px;
                font-size: 12px;
                min-height: 36px;
            }
            
            /* Mobile header adjustments */
            .h2 {
                font-size: 1.5rem;
            }
            
            .d-flex.justify-content-between {
                flex-direction: column;
                gap: 15px;
            }
            
            /* Mobile modal adjustments */
            .modal-dialog {
                margin: 10px;
                max-width: calc(100vw - 20px);
            }
            
            .modal-body {
                padding: 15px;
            }
            
            /* Form controls mobile friendly */
            .form-control, .form-select {
                padding: 10px 12px;
                font-size: 16px; /* Prevent zoom on iOS */
                min-height: 42px;
            }
            
            .form-label {
                font-size: 0.9rem;
                margin-bottom: 6px;
            }
            
            /* Stats grid mobile */
            .row .col-md-3 {
                margin-bottom: 10px;
            }
            
            /* Legend mobile */
            .legend-item {
                margin-bottom: 12px;
                font-size: 0.9rem;
            }
            
            .legend-color {
                width: 20px;
                height: 20px;
            }
            
            /* Popup adjustments for mobile */
            .leaflet-popup-content {
                font-size: 0.9rem;
                line-height: 1.4;
            }
            
            .leaflet-popup-content h6 {
                font-size: 1rem;
                margin-bottom: 8px;
            }
            
            .leaflet-popup-content .btn {
                padding: 6px 10px;
                font-size: 11px;
                margin: 2px;
            }
        }
        
        @media (max-width: 576px) {
            #map {
                height: 40vh;
            }
            
            .stats-card {
                padding: 12px;
            }
            
            .stats-number {
                font-size: 1.3rem;
            }
            
            .col-md-4 {
                order: 2; /* Move sidebar below map on very small screens */
            }
            
            .col-md-8 {
                order: 1;
            }
            
            .map-controls .form-control {
                margin-bottom: 8px;
            }
            
            /* Touch-friendly popups */
            .leaflet-popup {
                font-size: 0.85rem;
            }
            
            .leaflet-popup-content {
                margin: 8px 12px;
            }
        }

        /* Mobile Responsive Styles */
        @media (max-width: 768px) {
            #map {
                height: 50vh; /* Lebih kecil di mobile */
                margin-bottom: 15px;
            }
            
            .stats-card {
                padding: 15px;
                margin-bottom: 15px;
            }
            
            .stats-number {
                font-size: 1.5rem;
            }
            
            .map-controls {
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .map-controls .row > div {
                margin-bottom: 10px;
            }
            
            .coordinate-stats {
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .legend {
                padding: 10px;
                margin-bottom: 15px;
            }
            
            .info-panel {
                padding: 15px;
                margin-bottom: 15px;
            }
            
            /* Mobile-specific button sizes */
            .btn {
                padding: 8px 16px;
                font-size: 14px;
            }
            
            /* Mobile header adjustments */
            .h2 {
                font-size: 1.5rem;
            }
            
            /* Mobile sidebar adjustments */
            .main-content {
                padding: 10px !important;
            }
            
            /* Mobile modal adjustments */
            .modal-dialog {
                margin: 10px;
                max-width: calc(100% - 20px);
            }
            
            .modal-body {
                padding: 15px;
            }
            
            /* Mobile popup adjustments */
            .leaflet-popup-content {
                font-size: 14px;
                max-width: 250px;
            }
            
            .leaflet-popup-content h6 {
                font-size: 16px;
            }
            
            .leaflet-popup-content p {
                font-size: 13px;
                margin-bottom: 8px;
            }
            
            .leaflet-popup-content .btn {
                font-size: 12px;
                padding: 6px 12px;
                margin: 2px;
            }
        }
        
        /* Tablet Responsive Styles */
        @media (min-width: 769px) and (max-width: 1024px) {
            #map {
                height: 60vh;
            }
            
            .stats-number {
                font-size: 1.8rem;
            }
            
            .map-controls .row > div {
                margin-bottom: 15px;
            }
        }
        
        /* Touch-friendly improvements */
        @media (hover: none) and (pointer: coarse) {
            .customer-marker,
            .onu-marker,
            .offline-marker {
                width: 16px;
                height: 16px;
            }
            
            .marker-cluster {
                width: 24px;
                height: 24px;
                font-size: 12px;
            }
            
            .btn {
                min-height: 44px; /* Apple's recommended touch target size */
            }
            
            .form-control,
            .form-select {
                min-height: 44px;
            }
        }
        
        /* High DPI displays */
        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            .customer-marker,
            .onu-marker,
            .offline-marker,
            .marker-cluster {
                border-width: 1px;
            }
        }
        
        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            .map-controls,
            .info-panel,
            .legend,
            .coordinate-stats {
                background: #2d3748;
                color: #e2e8f0;
                border-color: #4a5568;
            }
            
            .coordinate-stats h6 {
                color: #e2e8f0;
            }
            
            .coordinate-stats .small {
                color: #a0aec0;
            }
        }
        
        /* Print styles */
        @media print {
            #map {
                height: 400px;
                page-break-inside: avoid;
            }
            
            .map-controls,
            .btn {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <% if (typeof isTechnicianView !== 'undefined' && isTechnicianView) { %>
                <%- include('../../partials/technician-responsive-sidebar', { page: 'mapping', technician: technician }) %>
            <% } else { %>
                <%- include('../../partials/billing-sidebar') %>
            <% } %>
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h1 class="h2">
                        <i class="bx bx-map"></i> <%= title || 'Network Mapping' %>
                    </h1>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary" onclick="refreshMap()">
                            <i class="bx bx-refresh"></i> Refresh
                        </button>
                        <button class="btn btn-outline-success" onclick="exportMapData()">
                            <i class="bx bx-download"></i> Export
                        </button>
                    </div>
                </div>

                <!-- Statistics Cards -->
                <div class="row">
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="stats-number" id="totalCustomers">-</div>
                                    <div>Total Pelanggan</div>
                                </div>
                                <i class="bx bx-user bx-lg"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="stats-number" id="totalONU">-</div>
                                    <div>Total ONU</div>
                                </div>
                                <i class="bx bx-wifi bx-lg"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="stats-number" id="onlineONU">-</div>
                                    <div>ONU Online</div>
                                </div>
                                <i class="bx bx-check-circle bx-lg"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <div class="stats-number" id="offlineONU">-</div>
                                    <div>ONU Offline</div>
                                </div>
                                <i class="bx bx-x-circle bx-lg"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Map Controls -->
                <div class="map-controls">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="filterStatus" class="form-label">Filter Status</label>
                            <select class="form-select" id="filterStatus" onchange="filterMarkers()">
                                <option value="all">Semua Status</option>
                                <option value="online">Online</option>
                                <option value="offline">Offline</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="filterPackage" class="form-label">Filter Paket</label>
                            <select class="form-select" id="filterPackage" onchange="filterMarkers()">
                                <option value="all">Semua Paket</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="searchLocation" class="form-label">Cari Lokasi</label>
                            <input type="text" class="form-control" id="searchLocation" placeholder="Masukkan nama lokasi...">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                                <i class="bx bx-refresh"></i> Clear Filter
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Main Map -->
                <div class="row">
                    <div class="col-md-8">
                        <div id="map"></div>
                    </div>
                    <div class="col-md-4">
                        <!-- Customer Coordinate Statistics -->
                        <div class="coordinate-stats mb-3">
                            <div id="coordinateStats">
                                <div class="text-center text-muted">
                                    <i class="bx bx-loader-alt bx-spin"></i> Loading...
                                </div>
                            </div>
                        </div>

                        <!-- Legend -->
                        <div class="legend">
                            <h6><i class="bx bx-info-circle"></i> Legenda</h6>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #28a745;"></div>
                                <span>Pelanggan</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #007bff;"></div>
                                <span>ONU Online</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #dc3545;"></div>
                                <span>ONU Offline</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background-color: #ffc107;"></div>
                                <span>Cluster</span>
                            </div>
                        </div>

                        <!-- Info Panel -->
                        <div class="info-panel">
                            <h6><i class="bx bx-info-circle"></i> Informasi</h6>
                            <div id="mapInfo">
                                <p class="text-muted">Klik marker untuk melihat detail</p>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Edit SSID/Password Modal -->
    <div class="modal fade" id="editDeviceModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Perangkat</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="editAlert" style="display:none;"></div>
                    <input type="hidden" id="editDeviceId">
                    <div class="mb-3">
                        <label for="editSSID" class="form-label">SSID</label>
                        <input type="text" class="form-control" id="editSSID" name="ssid">
                        <button type="button" class="btn btn-success mt-2 w-100" id="saveSsidBtn">Simpan SSID</button>
                    </div>
                    <div class="mb-3">
                        <label for="editPassword" class="form-label">Password WiFi</label>
                        <input type="text" class="form-control" id="editPassword" name="password">
                        <button type="button" class="btn btn-primary mt-2 w-100" id="savePasswordBtn">Simpan Password</button>
                    </div>
                    <div class="mb-3">
                        <label for="editTag" class="form-label">Tag Customer</label>
                        <input type="text" class="form-control" id="editTag" name="tag">
                        <button type="button" class="btn btn-info mt-2 w-100" id="saveTagBtn">Simpan Tag</button>
                    </div>
                </div>
                <div class="modal-footer d-flex flex-column align-items-stretch gap-2">
                    <div class="alert alert-info" role="alert">
                        <i class="bx bx-info-circle"></i> <strong>Tips:</strong> Setelah mengubah SSID/Password, restart perangkat untuk menerapkan perubahan dengan cepat.
                    </div>
                    <button type="button" class="btn btn-warning w-100" id="rebootAfterEditBtn">
                        <i class="bx bx-arrow-clockwise"></i> Restart Perangkat Setelah Edit
                    </button>
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Tutup</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Context variables
        const isTechnicianView = <%= typeof isTechnicianView !== 'undefined' && isTechnicianView ? 'true' : 'false' %>;
        
        let map;
        let customerMarkers = [];
        let onuMarkers = [];
        let currentDeviceId = null;

        // Initialize map
        function initMap() {
            // Default location (Jakarta) - akan diupdate setelah load data
            const defaultLat = -6.2088;
            const defaultLng = 106.8456;
            
            map = L.map('map').setView([defaultLat, defaultLng], 10);
            
            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
            
            // Load data dan auto-focus ke lokasi pelanggan
            loadMapData();
        }

        // Load map data
        async function loadMapData() {
            try {
                // Tentukan base path berdasarkan context (admin atau technician)
                const basePath = (typeof isTechnicianView !== 'undefined' && isTechnicianView) ? '/technician' : '/admin/billing';
                const baseApiPath = (typeof isTechnicianView !== 'undefined' && isTechnicianView) ? '/technician/api' : '/admin/billing/api';
                
                // Load customers
                const customersResponse = await fetch(`${baseApiPath}/customers`);
                const customersData = await customersResponse.json();
                
                if (customersData.success) {
                    await addCustomerMarkers(customersData.customers);
                    updateStats('totalCustomers', customersData.customers.length);
                    
                    // Auto-focus map ke lokasi pelanggan
                    autoFocusMapToCustomers(customersData.customers);
                    
                    // Hitung statistik koordinat customer
                    const customersWithCoords = customersData.customers.filter(c => c.latitude && c.longitude).length;
                    const customersWithoutCoords = customersData.customers.length - customersWithCoords;
                    
                    // Update statistik koordinat customer
                    updateCustomerCoordinateStats(customersWithCoords, customersWithoutCoords);
                }
                
                // Load GenieACS statistics terlebih dahulu
                const statsResponse = await fetch(`${baseApiPath}/statistics`);
                const statsData = await statsResponse.json();
                
                if (statsData.success) {
                    // Update statistik cards dengan data yang akurat
                    updateStats('totalONU', statsData.data.totalDevices);
                    updateStats('onlineONU', statsData.data.onlineDevices);
                    updateStats('offlineONU', statsData.data.offlineDevices);
                }
                
                // Load ONU devices dengan koordinat dari GenieACS
                const onuResponse = await fetch(`${basePath}/api/mapping/devices`);
                const onuData = await onuResponse.json();
                
                if (onuData.success) {
                    // Filter devices yang punya koordinat
                    const devicesWithCoords = onuData.data.devicesWithCoords;
                    const devicesWithoutCoords = onuData.data.devicesWithoutCoords;
                    
                    addONUMarkers(devicesWithCoords);
                    
                    // Tampilkan info koordinat device
                    showDeviceCoordinateInfo(onuData.data);
                }
                
                // Load packages for filter
                loadPackages();
                
            } catch (error) {
                console.error('Error loading map data:', error);
                showToast('Error loading map data', 'error');
                
                // Fallback: coba load data GenieACS langsung
                try {
                    await loadGenieACSDataDirectly();
                } catch (fallbackError) {
                    console.error('Fallback GenieACS data fetch also failed:', fallbackError);
                }
            }
        }

        // Auto-focus map ke lokasi pelanggan yang ada
        function autoFocusMapToCustomers(customers) {
            if (customers.length === 0) {
                handleNoCustomerCoordinates();
                return;
            }
            
            // Filter pelanggan yang punya koordinat
            const customersWithCoords = customers.filter(c => c.latitude && c.longitude);
            
            if (customersWithCoords.length === 0) {
                handleNoCustomerCoordinates();
                return;
            }
            
            // Hitung center dan bounds
            const coords = customersWithCoords.map(c => [c.latitude, c.longitude]);
            
            if (coords.length === 1) {
                // Jika hanya 1 pelanggan, zoom ke level 15
                map.setView(coords[0], 15);
            } else {
                // Jika banyak pelanggan, fit semua dalam view dengan padding
                const bounds = L.latLngBounds(coords);
                map.fitBounds(bounds, { 
                    padding: [50, 50],  // Padding dari edge
                    maxZoom: 15,         // Max zoom level
                    animate: true        // Animasi smooth
                });
            }
            
            // Update info panel
            updateMapInfo(customersWithCoords.length);
        }

        // Update info panel dengan jumlah pelanggan yang ditampilkan
        function updateMapInfo(customersCount) {
            const infoPanel = document.getElementById('mapInfo');
            if (infoPanel) {
                infoPanel.innerHTML = `
                    <div class="mb-3">
                        <h6 class="text-success">📍 Lokasi Pelanggan</h6>
                        <div class="small">
                            <div>• Total ditampilkan: <strong>${customersCount}</strong> pelanggan</div>
                            <div>• Map otomatis fokus ke area pelanggan</div>
                        </div>
                    </div>
                    <div class="alert alert-info alert-sm">
                        <small>
                            <strong>💡 Tips:</strong> Klik marker untuk melihat detail pelanggan dan device.
                        </small>
                    </div>
                `;
            }
        }

        // Fallback jika tidak ada pelanggan dengan koordinat
        function handleNoCustomerCoordinates() {
            const infoPanel = document.getElementById('mapInfo');
            if (infoPanel) {
                infoPanel.innerHTML = `
                    <div class="mb-3">
                        <h6 class="text-warning">⚠️ Tidak Ada Koordinat</h6>
                        <div class="small">
                            <div>• Belum ada pelanggan dengan koordinat</div>
                            <div>• Tambahkan koordinat di form edit customer</div>
                        </div>
                    </div>
                    <div class="alert alert-warning alert-sm">
                        <small>
                            <strong>💡 Tips:</strong> Edit customer dan tambahkan latitude/longitude untuk menampilkan di peta.
                        </small>
                    </div>
                `;
            }
        }

        // Fallback function untuk load data GenieACS langsung
        async function loadGenieACSDataDirectly() {
            try {
                // Ambil data GenieACS langsung dari endpoint yang sudah ada
                const genieacsResponse = await fetch('/admin/genieacs');
                const genieacsData = await genieacsResponse.text();
                
                // Parse HTML untuk extract data (fallback method)
                const parser = new DOMParser();
                const doc = parser.parseFromString(genieacsData, 'text/html');
                
                // Cari elemen yang berisi statistik GenieACS
                const statsElements = doc.querySelectorAll('[data-genieacs-stats]');
                if (statsElements.length > 0) {
                    // Update statistik dari data yang ada
                    updateStats('totalONU', 'Loading...');
                    updateStats('onlineONU', 'Loading...');
                    updateStats('offlineONU', 'Loading...');
                }
                
                showToast('Using fallback data source', 'info');
            } catch (error) {
                console.error('Fallback GenieACS data fetch failed:', error);
                // Set default values jika semua gagal
                updateStats('totalONU', 'Error');
                updateStats('onlineONU', 'Error');
                updateStats('offlineONU', 'Error');
            }
        }

        // Update statistik koordinat customer
        function updateCustomerCoordinateStats(withCoords, withoutCoords) {
            const statsContainer = document.getElementById('coordinateStats');
            if (statsContainer) {
                statsContainer.innerHTML = `
                    <div class="mb-3">
                        <h6 class="text-primary">📊 Statistik Koordinat Customer</h6>
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="badge bg-success">${withCoords}</div>
                                <small class="d-block">Dengan Koordinat</small>
                            </div>
                            <div class="col-6">
                                <div class="badge bg-warning">${withoutCoords}</div>
                                <small class="d-block">Tanpa Koordinat</small>
                            </div>
                        </div>
                    </div>
                `;
            }
        }

        // Tampilkan info koordinat device
        function showDeviceCoordinateInfo(data) {
            const infoPanel = document.getElementById('mapInfo');
            if (infoPanel) {
                infoPanel.innerHTML = `
                    <div class="mb-3">
                        <h6 class="text-info">🔗 Sumber Koordinat Device</h6>
                        <div class="small">
                            <div>• PPPoE Username: ${data.coordinateSources.pppoe_username}</div>
                            <div>• Device Tag: ${data.coordinateSources.device_tag}</div>
                            <div>• Serial Number: ${data.coordinateSources.serial_number}</div>
                        </div>
                    </div>
                    <div class="alert alert-info alert-sm">
                        <small>
                            <strong>💡 Tips:</strong> Device tanpa koordinat dapat diupdate melalui form edit customer atau bulk import.
                        </small>
                    </div>
                `;
            }
        }

        // Add customer markers
        async function addCustomerMarkers(customers) {
            // Tentukan endpoint berdasarkan context
            const basePath = (typeof isTechnicianView !== 'undefined' && isTechnicianView) ? '/technician' : '/admin';
            
            for (const customer of customers) {
                if (customer.latitude && customer.longitude) {
                    // Cari device GenieACS berdasarkan PPPoE username atau phone
                    let deviceInfo = null;
                    let deviceStatus = 'Unknown';
                    let signalStrength = 'N/A';
                    let ssid = 'N/A';
                    let deviceModel = 'N/A';
                    let lastSeen = 'N/A';
                    
                    try {
                        // Coba cari device berdasarkan PPPoE username
                        if (customer.pppoe_username) {
                            const deviceResponse = await fetch(`${basePath}/api/mapping/devices?pppoe=${encodeURIComponent(customer.pppoe_username)}`);
                            const deviceData = await deviceResponse.json();
                            if (deviceData.success && deviceData.data.devicesWithCoords.length > 0) {
                                deviceInfo = deviceData.data.devicesWithCoords[0];
                                deviceStatus = deviceInfo.status || 'Unknown';
                                signalStrength = deviceInfo.rxPower || 'N/A';
                                ssid = deviceInfo.ssid || 'N/A';
                                deviceModel = deviceInfo.model || 'N/A';
                                lastSeen = deviceInfo.lastInform || 'N/A';
                            }
                        }
                        
                        // Jika tidak ada device, coba cari berdasarkan phone number
                        if (!deviceInfo && customer.phone) {
                            const deviceResponse = await fetch(`${basePath}/api/mapping/devices?phone=${encodeURIComponent(customer.phone)}`);
                            const deviceData = await deviceResponse.json();
                            if (deviceData.success && deviceData.data.devicesWithCoords.length > 0) {
                                deviceInfo = deviceData.data.devicesWithCoords[0];
                                deviceStatus = deviceInfo.status || 'Unknown';
                                signalStrength = deviceInfo.rxPower || 'N/A';
                                ssid = deviceInfo.ssid || 'N/A';
                                deviceModel = deviceInfo.model || 'N/A';
                                lastSeen = deviceInfo.lastInform || 'N/A';
                            }
                        }
                    } catch (error) {
                        console.error(`Error fetching device info for customer ${customer.username}:`, error);
                    }
                    
                    // Tentukan warna marker berdasarkan status device
                    let markerColor = '#28a745'; // Default hijau
                    if (deviceInfo) {
                        if (deviceStatus === 'Online') {
                            markerColor = '#28a745'; // Hijau untuk online
                        } else if (deviceStatus === 'Offline') {
                            markerColor = '#dc3545'; // Merah untuk offline
                        } else {
                            markerColor = '#ffc107'; // Kuning untuk unknown
                        }
                    }
                    
                    const marker = L.circleMarker([customer.latitude, customer.longitude], {
                        radius: 8,
                        fillColor: markerColor,
                        color: 'white',
                        weight: 2,
                        opacity: 1,
                        fillOpacity: 0.8
                    }).addTo(map);
                    
                    // Buat popup content dengan informasi lengkap
                    let popupContent = `
                        <div class="text-center">
                            <h6><strong>${customer.name}</strong></h6>
                            <p class="mb-1"><strong>Username:</strong> ${customer.username}</p>
                            <p class="mb-1"><strong>Phone:</strong> ${customer.phone}</p>
                            <p class="mb-1"><strong>Package:</strong> ${customer.package_name || 'N/A'}</p>
                            <p class="mb-1"><strong>Status:</strong> <span class="badge bg-success">${customer.status}</span></p>
                            <p class="mb-1"><strong>Address:</strong> ${customer.address || 'N/A'}</p>
                    `;
                    
                    // Tambahkan informasi device jika ada
                    if (deviceInfo) {
                        popupContent += `
                            <hr class="my-2">
                            <h6 class="text-primary">📡 Device Information</h6>
                            <p class="mb-1"><strong>Device Status:</strong> <span class="badge ${deviceStatus === 'Online' ? 'bg-success' : deviceStatus === 'Offline' ? 'bg-danger' : 'bg-warning'}">${deviceStatus}</span></p>
                            <p class="mb-1"><strong>Signal Strength:</strong> <span class="badge ${getSignalStrengthBadge(signalStrength)}">${signalStrength}</span></p>
                            <p class="mb-1"><strong>User Terhubung:</strong> <span class="badge bg-info">${deviceInfo.userConnected || '0'} user</span></p>
                            <p class="mb-1"><strong>Device Model:</strong> ${deviceModel}</p>
                            <p class="mb-1"><strong>PPPoE Username:</strong> ${customer.pppoe_username || 'N/A'}</p>
                            <p class="mb-1"><strong>PPPoE IP:</strong> ${deviceInfo.pppoeIP || 'N/A'}</p>
                            <p class="mb-1"><strong>SSID 2.4GHz:</strong> ${deviceInfo.ssid || 'N/A'}</p>
                            <p class="mb-1"><strong>SSID 5GHz:</strong> ${deviceInfo.ssid5g || 'N/A'}</p>
                            <p class="mb-1"><strong>Password 5GHz:</strong> ${deviceInfo.password5g || 'N/A'}</p>
                            <p class="mb-1"><strong>Uptime:</strong> ${formatUptime(deviceInfo.uptime)}</p>
                            <p class="mb-1"><strong>Last Seen:</strong> ${formatLastSeen(lastSeen)}</p>
                            <hr class="my-2">
                            <div class="row g-2 text-start">
                                <div class="col-12">
                                    <label class="form-label small mb-1">SSID 2.4G</label>
                                    <div class="input-group input-group-sm">
                                        <input type="text" class="form-control" id="adminSsidInput_${deviceInfo.id}" placeholder="Nama WiFi">
                                        <button class="btn btn-success" onclick="adminSaveSsid('${deviceInfo.id}')">Simpan SSID</button>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <label class="form-label small mb-1">Password</label>
                                    <div class="input-group input-group-sm">
                                        <input type="text" class="form-control" id="adminPassInput_${deviceInfo.id}" placeholder="Minimal 8 karakter">
                                        <button class="btn btn-primary" onclick="adminSavePass('${deviceInfo.id}')">Simpan Password</button>
                                    </div>
                                    <small class="text-muted">SSID 5GHz otomatis: SSID + "-5G"</small>
                                </div>
                            </div>
                        `;
                    } else {
                        popupContent += `
                            <hr class="my-2">
                            <p class="text-muted"><small>📡 Device information not available</small></p>
                        `;
                    }
                    
                    popupContent += `
                        </div>
                    `;
                    
                    marker.bindPopup(popupContent);
                    
                    // Store customer and device data in marker for filtering
                    marker.customerData = customer;
                    marker.deviceInfo = deviceInfo;
                    
                    customerMarkers.push(marker);
                }
            }
        }

        // Add ONU markers
        function addONUMarkers(devices) {
            devices.forEach(device => {
                if (device.latitude && device.longitude) {
                    const isOnline = device.status === 'Online';
                    const color = isOnline ? '#007bff' : '#dc3545';
                    
                    const marker = L.circleMarker([device.latitude, device.longitude], {
                        radius: 6,
                        fillColor: color,
                        color: 'white',
                        weight: 2,
                        opacity: 1,
                        fillOpacity: 0.8
                    }).addTo(map);
                    
                    marker.bindPopup(`
                        <div class="text-center">
                            <h6><strong>ONU Device</strong></h6>
                            <p class="mb-1"><strong>Status:</strong> <span class="badge ${isOnline ? 'bg-success' : 'bg-danger'}">${device.status}</span></p>
                            <p class="mb-1"><strong>User Terhubung:</strong> <span class="badge bg-info">${device.userConnected || '0'} user</span></p>
                            <p class="mb-1"><strong>RX Power:</strong> ${device.rxPower || 'N/A'}</p>
                            <p class="mb-1"><strong>PPPoE:</strong> ${device.pppoeUsername}</p>
                            <p class="mb-1"><strong>Customer:</strong> ${device.customerName || 'N/A'}</p>
                            <p class="mb-1"><strong>Phone:</strong> ${device.customerPhone || 'N/A'}</p>
                            <p class="mb-1"><strong>Source:</strong> <span class="badge bg-info">${device.coordinateSource}</span></p>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-warning" onclick="editDevice('${device.id}', '${device.ssid || ''}', '${device.password || ''}', '${device.tag || ''}')" title="Edit SSID & Password">
                                    <i class="bx bx-pencil"></i> Edit
                                </button>
                                ${device.customerId ? `
                                <button class="btn btn-sm btn-primary" onclick="editCustomerCoordinates(${device.customerId}, ${device.latitude}, ${device.longitude})">
                                    <i class="bx bx-map"></i> Edit Koordinat
                                </button>
                                ` : ''}
                            </div>
                        </div>
                    `);
                    
                    // Store device and customer data in marker for filtering
                    marker.deviceData = device;
                    marker.customerData = device.customerId ? { package_id: device.packageId } : null;
                    
                    onuMarkers.push(marker);
                }
            });
        }

        // Load packages for filter
        async function loadPackages() {
            try {
                // Tentukan endpoint berdasarkan context
                const apiPath = (typeof isTechnicianView !== 'undefined' && isTechnicianView) ? '/technician/api' : '/admin/billing/api';
                
                const response = await fetch(`${apiPath}/packages`);
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('filterPackage');
                    data.packages.forEach(package => {
                        const option = document.createElement('option');
                        option.value = package.id;
                        option.textContent = package.name;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading packages:', error);
            }
        }

        // Filter markers
        function filterMarkers() {
            const statusFilter = document.getElementById('filterStatus').value;
            const packageFilter = document.getElementById('filterPackage').value;
            
            console.log('Filtering markers:', { statusFilter, packageFilter });
            
            // Show/hide customer markers based on filter
            customerMarkers.forEach(marker => {
                let show = true;
                
                // Apply package filter
                if (packageFilter !== 'all') {
                    const customerData = marker.customerData;
                    if (customerData && customerData.package_id) {
                        show = customerData.package_id.toString() === packageFilter;
                    } else {
                        show = false; // Hide if no package data
                    }
                }
                
                // Apply status filter (if customer has device data)
                if (statusFilter !== 'all' && marker.deviceInfo) {
                    const deviceStatus = marker.deviceInfo.status || 'Unknown';
                    if (statusFilter === 'online' && deviceStatus !== 'Online') {
                        show = false;
                    } else if (statusFilter === 'offline' && deviceStatus !== 'Offline') {
                        show = false;
                    }
                }
                
                if (show) {
                    if (!map.hasLayer(marker)) {
                        marker.addTo(map);
                    }
                } else {
                    if (map.hasLayer(marker)) {
                        marker.remove();
                    }
                }
            });
            
            // Show/hide ONU markers based on filter
            onuMarkers.forEach(marker => {
                let show = true;
                
                // Apply status filter
                if (statusFilter !== 'all') {
                    const deviceStatus = marker.deviceData.status || 'Unknown';
                    if (statusFilter === 'online' && deviceStatus !== 'Online') {
                        show = false;
                    } else if (statusFilter === 'offline' && deviceStatus !== 'Offline') {
                        show = false;
                    }
                }
                
                // Apply package filter (if ONU has customer data)
                if (packageFilter !== 'all' && marker.customerData) {
                    if (marker.customerData.package_id) {
                        show = marker.customerData.package_id.toString() === packageFilter;
                    } else {
                        show = false;
                    }
                }
                
                if (show) {
                    if (!map.hasLayer(marker)) {
                        marker.addTo(map);
                    }
                } else {
                    if (map.hasLayer(marker)) {
                        marker.remove();
                    }
                }
            });
            
            // Update filter info
            updateFilterInfo();
        }
        
        // Update filter information display
        function updateFilterInfo() {
            const statusFilter = document.getElementById('filterStatus').value;
            const packageFilter = document.getElementById('filterPackage').value;
            
            let visibleCustomers = 0;
            let visibleONUs = 0;
            
            // Count visible customer markers
            customerMarkers.forEach(marker => {
                if (map.hasLayer(marker)) {
                    visibleCustomers++;
                }
            });
            
            // Count visible ONU markers
            onuMarkers.forEach(marker => {
                if (map.hasLayer(marker)) {
                    visibleONUs++;
                }
            });
            
            // Update map info with filter results
            const infoPanel = document.getElementById('mapInfo');
            if (infoPanel) {
                let filterText = '';
                if (statusFilter !== 'all' || packageFilter !== 'all') {
                    filterText = `
                        <div class="alert alert-info alert-sm mb-2">
                            <small>
                                <strong>🔍 Filter Aktif:</strong><br>
                                ${statusFilter !== 'all' ? `• Status: ${statusFilter === 'online' ? 'Online' : 'Offline'}<br>` : ''}
                                ${packageFilter !== 'all' ? `• Paket: ${document.getElementById('filterPackage').options[document.getElementById('filterPackage').selectedIndex].text}<br>` : ''}
                                • Pelanggan: ${visibleCustomers} | ONU: ${visibleONUs}
                            </small>
                        </div>
                    `;
                }
                
                infoPanel.innerHTML = `
                    <div class="mb-3">
                        <h6 class="text-success">📍 Lokasi Pelanggan</h6>
                        <div class="small">
                            <div>• Total ditampilkan: <strong>${visibleCustomers}</strong> pelanggan</div>
                            <div>• Total ONU ditampilkan: <strong>${visibleONUs}</strong> device</div>
                            ${filterText}
                        </div>
                    </div>
                    <div class="alert alert-info alert-sm">
                        <small>
                            <strong>💡 Tips:</strong> Gunakan filter untuk melihat pelanggan berdasarkan paket atau status device.
                        </small>
                    </div>
                `;
            }
        }
        
        // Clear all filters
        function clearFilters() {
            document.getElementById('filterStatus').value = 'all';
            document.getElementById('filterPackage').value = 'all';
            document.getElementById('searchLocation').value = '';
            
            // Show all markers
            customerMarkers.forEach(marker => {
                if (!map.hasLayer(marker)) {
                    marker.addTo(map);
                }
            });
            
            onuMarkers.forEach(marker => {
                if (!map.hasLayer(marker)) {
                    marker.addTo(map);
                }
            });
            
            // Update info
            updateFilterInfo();
            
            // Show success message
            showToast('Filter berhasil di-clear', 'success');
        }

        // Edit device
        function editDevice(deviceId, ssid, password, tag) {
            currentDeviceId = deviceId;
            document.getElementById('editDeviceId').value = deviceId; // Set hidden input
            document.getElementById('editSSID').value = ssid || '';
            document.getElementById('editPassword').value = password || '';
            document.getElementById('editTag').value = tag || '';
            
            new bootstrap.Modal(document.getElementById('editDeviceModal')).show();
        }

        // Save device changes
        async function saveDeviceChanges() {
            if (!currentDeviceId) return;
            
            const ssid = document.getElementById('editSSID').value;
            const password = document.getElementById('editPassword').value;
            const tag = document.getElementById('editTag').value;
            
            try {
                // Tentukan endpoint berdasarkan context
                const endpoint = isTechnicianView ? `/technician/genieacs/devices/${currentDeviceId}` : `/admin/genieacs/devices/${currentDeviceId}`;
                
                const response = await fetch(endpoint, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ssid,
                        password,
                        tag
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('Device updated successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editDeviceModal')).hide();
                    refreshMap();
                } else {
                    showToast(result.message || 'Failed to update device', 'error');
                }
            } catch (error) {
                console.error('Error updating device:', error);
                showToast('Error updating device', 'error');
            }
        }

        // Quick save SSID via mapping popup (admin)
        async function adminSaveSsid(deviceId) {
            try {
                const el = document.getElementById('adminSsidInput_' + deviceId);
                if (!el) return showToast('Input SSID tidak ditemukan', 'error');
                const ssid = el.value.trim();
                if (!ssid) return showToast('SSID tidak boleh kosong', 'error');
                const resp = await fetch('/admin/genieacs/genieacs/edit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: deviceId, ssid })
                });
                const data = await resp.json();
                if (data.success) {
                    showToast('SSID berhasil diupdate', 'success');
                } else {
                    showToast(data.message || 'Gagal update SSID', 'error');
                }
            } catch (e) {
                showToast('Error: ' + e.message, 'error');
            }
        }

        // Quick save Password via mapping popup (admin)
        async function adminSavePass(deviceId) {
            try {
                const el = document.getElementById('adminPassInput_' + deviceId);
                if (!el) return showToast('Input Password tidak ditemukan', 'error');
                const password = el.value.trim();
                if (!password || password.length < 8) return showToast('Password minimal 8 karakter', 'error');
                const resp = await fetch('/admin/genieacs/genieacs/edit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: deviceId, password })
                });
                const data = await resp.json();
                if (data.success) {
                    showToast('Password berhasil diupdate', 'success');
                } else {
                    showToast(data.message || 'Gagal update password', 'error');
                }
            } catch (e) {
                showToast('Error: ' + e.message, 'error');
            }
        }

        // Refresh map
        function refreshMap() {
            // Clear existing markers
            customerMarkers.forEach(marker => marker.remove());
            onuMarkers.forEach(marker => marker.remove());
            customerMarkers = [];
            onuMarkers = [];
            
            // Reload data
            loadMapData();
        }

        // Export map data
        function exportMapData() {
            // Implementation for exporting map data
            showToast('Export feature coming soon', 'info');
        }

        // Update statistics
        function updateStats(elementId, value) {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = value;
            }
        }

        // Show toast notification
        function showToast(message, type) {
            // Simple toast implementation
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 5000);
        }

        // Helper function untuk menentukan badge signal strength
        function getSignalStrengthBadge(signalStrength) {
            if (signalStrength === 'N/A') return 'bg-secondary';
            
            const signal = parseFloat(signalStrength);
            if (signal >= -25) return 'bg-success';      // Excellent
            if (signal >= -27) return 'bg-info';         // Good
            if (signal >= -30) return 'bg-warning';      // Fair
            return 'bg-danger';                           // Poor
        }

        // Helper function untuk format last seen
        function formatLastSeen(lastSeen) {
            if (lastSeen === 'N/A') return 'N/A';
            
            try {
                const date = new Date(lastSeen);
                if (isNaN(date.getTime())) return lastSeen;
                
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / (1000 * 60));
                const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
                const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                
                if (diffMins < 1) return 'Just now';
                if (diffMins < 60) return `${diffMins} minutes ago`;
                if (diffHours < 24) return `${diffHours} hours ago`;
                if (diffDays < 7) return `${diffDays} days ago`;
                
                return date.toLocaleDateString('id-ID', {
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (error) {
                return lastSeen;
            }
        }

        // Helper function untuk format uptime (detik -> d h m)
        function formatUptime(u) {
            const seconds = parseInt(u, 10);
            if (!Number.isFinite(seconds) || seconds < 0) return String(u || 'N/A');
            if (seconds < 60) return `${seconds}s`;
            const mins = Math.floor(seconds / 60);
            if (mins < 60) return `${mins}m ${seconds % 60}s`;
            const hours = Math.floor(mins / 60);
            const remM = mins % 60;
            if (hours < 24) return `${hours}h ${remM}m`;
            const days = Math.floor(hours / 24);
            const remH = hours % 24;
            return `${days}d ${remH}h ${remM}m`;
        }

        // Initialize map when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initMap();
            
            // Initialize modal event listeners
            initializeModalListeners();
            
            // Initialize mobile-specific features
            initializeMobileFeatures();
        });

        // Initialize modal event listeners
        function initializeModalListeners() {
            // Save SSID button
            document.getElementById('saveSsidBtn').addEventListener('click', function() {
                const deviceId = document.getElementById('editDeviceId').value;
                const newSSID = document.getElementById('editSSID').value;
                if (deviceId && newSSID) {
                    updateDeviceSSID(deviceId, newSSID);
                }
            });
            
            // Save Password button
            document.getElementById('savePasswordBtn').addEventListener('click', function() {
                const deviceId = document.getElementById('editDeviceId').value;
                const newPassword = document.getElementById('editPassword').value;
                if (deviceId && newPassword) {
                    updateDevicePassword(deviceId, newPassword);
                }
            });
            
            // Save Tag button
            document.getElementById('saveTagBtn').addEventListener('click', function() {
                const deviceId = document.getElementById('editDeviceId').value;
                const newTag = document.getElementById('editTag').value;
                if (deviceId && newTag) {
                    updateDeviceTag(deviceId, newTag);
                }
            });
            
            // Restart device button
            document.getElementById('rebootAfterEditBtn').addEventListener('click', function() {
                const deviceId = document.getElementById('editDeviceId').value;
                if (deviceId) {
                    restartDevice(deviceId);
                }
            });
        }

        // Update device SSID
        async function updateDeviceSSID(deviceId, newSSID) {
            try {
                const response = await fetch('/admin/genieacs/genieacs/edit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: deviceId,
                        ssid: newSSID
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('SSID berhasil diupdate!', 'success');
                    showEditAlert('SSID berhasil diupdate!', 'success');
                    // Refresh data
                    setTimeout(() => {
                        refreshMap();
                    }, 1000);
                } else {
                    showToast(result.message || 'Gagal update SSID', 'error');
                    showEditAlert(result.message || 'Gagal update SSID', 'danger');
                }
            } catch (error) {
                console.error('Error updating SSID:', error);
                showToast('Error updating SSID', 'error');
                showEditAlert('Error updating SSID', 'danger');
            }
        }

        // Update device password
        async function updateDevicePassword(deviceId, newPassword) {
            try {
                const response = await fetch('/admin/genieacs/genieacs/edit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: deviceId,
                        password: newPassword
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    showToast('Password berhasil diupdate!', 'success');
                    showEditAlert('Password berhasil diupdate!', 'success');
                    // Refresh data
                    setTimeout(() => {
                        refreshMap();
                    }, 1000);
                } else {
                    showToast(result.message || 'Gagal update password', 'error');
                    showEditAlert(result.message || 'Gagal update password', 'danger');
                }
            } catch (error) {
                console.error('Error updating password:', error);
                showToast('Error updating password', 'error');
                showEditAlert('Error updating password', 'danger');
            }
        }

        // Update device tag
        async function updateDeviceTag(deviceId, newTag) {
            try {
                // Implement tag update logic here
                showToast('Tag berhasil diupdate!', 'success');
                showEditAlert('Tag berhasil diupdate!', 'success');
                // Refresh data
                setTimeout(() => {
                    refreshMap();
                }, 1000);
            } catch (error) {
                console.error('Error updating tag:', error);
                showToast('Error updating tag', 'error');
                showEditAlert('Error updating tag', 'danger');
            }
        }

        // Restart device
        async function restartDevice(deviceId) {
            try {
                // Implement device restart logic here
                showToast('Device restart command sent!', 'info');
                showEditAlert('Device restart command sent!', 'info');
                // Refresh data after restart
                setTimeout(() => {
                    refreshMap();
                }, 5000);
            } catch (error) {
                console.error('Error restarting device:', error);
                showToast('Error restarting device', 'error');
                showEditAlert('Error restarting device', 'danger');
            }
        }

        // Show edit alert in modal
        function showEditAlert(message, type) {
            const alertDiv = document.getElementById('editAlert');
            if (alertDiv) {
                alertDiv.className = `alert alert-${type}`;
                alertDiv.textContent = message;
                alertDiv.style.display = 'block';
                
                // Auto-hide after 3 seconds
                setTimeout(() => {
                    alertDiv.style.display = 'none';
                }, 3000);
            }
        }

        // Edit device tag (separate function)
        function editDeviceTag(deviceId, currentTag) {
            document.getElementById('editDeviceId').value = deviceId;
            document.getElementById('editTag').value = currentTag;
            new bootstrap.Modal(document.getElementById('editDeviceModal')).show();
        }

        // Initialize mobile-specific features
        function initializeMobileFeatures() {
            // Detect mobile device
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
            
            if (isMobile || isTouch) {
                // Add mobile-specific classes
                document.body.classList.add('mobile-device');
                
                // Adjust map for mobile
                adjustMapForMobile();
                
                // Add touch gesture handlers
                addTouchGestureHandlers();
                
                // Optimize for mobile performance
                optimizeForMobile();
            }
            
            // Handle orientation change
            window.addEventListener('orientationchange', function() {
                setTimeout(function() {
                    if (map) {
                        map.invalidateSize();
                        // Re-center map if needed
                        if (customerMarkers.length > 0) {
                            const coords = customerMarkers.map(m => m.getLatLng());
                            if (coords.length > 0) {
                                const bounds = L.latLngBounds(coords);
                                map.fitBounds(bounds, { padding: [20, 20] });
                            }
                        }
                    }
                }, 100);
            });
            
            // Handle resize
            window.addEventListener('resize', function() {
                if (map) {
                    map.invalidateSize();
                }
            });
        }

        // Adjust map for mobile devices
        function adjustMapForMobile() {
            if (!map) return;
            
            // Disable double click zoom on mobile
            map.doubleClickZoom.disable();
            
            // Enable tap handler
            map.tap.enable();
            
            // Adjust zoom control position for mobile
            const zoomControl = L.control.zoom({
                position: 'bottomright',
                zoomInTitle: 'Zoom In',
                zoomOutTitle: 'Zoom Out'
            });
            
            // Remove default zoom control and add custom one
            map.removeControl(map.zoomControl);
            map.addControl(zoomControl);
            
            // Add fullscreen control for mobile
            const fullscreenControl = L.control.fullscreen({
                position: 'topleft',
                title: 'Toggle Fullscreen'
            });
            map.addControl(fullscreenControl);
        }

        // Add touch gesture handlers
        function addTouchGestureHandlers() {
            if (!map) return;
            
            let touchStartTime = 0;
            let touchStartPos = null;
            
            // Handle touch start
            map.on('touchstart', function(e) {
                touchStartTime = Date.now();
                touchStartPos = e.touches[0];
            });
            
            // Handle touch end
            map.on('touchend', function(e) {
                const touchEndTime = Date.now();
                const touchDuration = touchEndTime - touchStartTime;
                
                // Long press detection (500ms)
                if (touchDuration > 500 && touchStartPos) {
                    const touchEndPos = e.changedTouches[0];
                    const distance = Math.sqrt(
                        Math.pow(touchEndPos.clientX - touchStartPos.clientX, 2) +
                        Math.pow(touchEndPos.clientY - touchStartPos.clientY, 2)
                    );
                    
                    // If finger didn't move much, it's a long press
                    if (distance < 10) {
                        handleLongPress(e);
                    }
                }
            });
        }

        // Handle long press on map
        function handleLongPress(e) {
            const latlng = map.containerPointToLatLng(e.containerPoint);
            
            // Show context menu or additional options
            showMobileContextMenu(latlng, e.containerPoint);
        }

        // Show mobile context menu
        function showMobileContextMenu(latlng, containerPoint) {
            // Remove existing context menu
            const existingMenu = document.querySelector('.mobile-context-menu');
            if (existingMenu) {
                existingMenu.remove();
            }
            
            // Create context menu
            const menu = document.createElement('div');
            menu.className = 'mobile-context-menu';
            menu.style.cssText = `
                position: fixed;
                top: ${containerPoint.y}px;
                left: ${containerPoint.x}px;
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                padding: 8px 0;
                min-width: 150px;
            `;
            
            menu.innerHTML = `
                <div class="context-menu-item" onclick="addCustomerMarkerAt(${latlng.lat}, ${latlng.lng})">
                    <i class="bx bx-user-plus"></i> Tambah Customer
                </div>
                <div class="context-menu-item" onclick="getLocationInfo(${latlng.lat}, ${latlng.lng})">
                    <i class="bx bx-map-pin"></i> Info Lokasi
                </div>
                <div class="context-menu-item" onclick="copyCoordinates(${latlng.lat}, ${latlng.lng})">
                    <i class="bx bx-copy"></i> Copy Koordinat
                </div>
            `;
            
            document.body.appendChild(menu);
            
            // Auto-hide after 3 seconds
            setTimeout(() => {
                if (menu.parentNode) {
                    menu.remove();
                }
            }, 3000);
            
            // Hide when clicking outside
            document.addEventListener('click', function hideMenu() {
                if (menu.parentNode) {
                    menu.remove();
                }
                document.removeEventListener('click', hideMenu);
            });
        }

        // Optimize for mobile performance
        function optimizeForMobile() {
            // Reduce marker update frequency on mobile
            if (map) {
                map.on('zoomend', function() {
                    // Update marker visibility based on zoom level
                    const zoom = map.getZoom();
                    customerMarkers.forEach(marker => {
                        if (zoom < 10) {
                            // Hide detailed markers at low zoom
                            marker.setOpacity(0.6);
                        } else {
                            marker.setOpacity(1);
                        }
                    });
                });
            }
            
            // Add mobile-specific CSS
            const style = document.createElement('style');
            style.textContent = `
                .mobile-context-menu {
                    font-size: 14px;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                }
                
                .context-menu-item {
                    padding: 12px 16px;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s;
                }
                
                .context-menu-item:last-child {
                    border-bottom: none;
                }
                
                .context-menu-item:hover {
                    background-color: #f8f9fa;
                }
                
                .context-menu-item i {
                    font-size: 16px;
                    color: #6c757d;
                }
                
                @media (max-width: 768px) {
                    .mobile-context-menu {
                        min-width: 180px;
                        font-size: 16px;
                    }
                    
                    .context-menu-item {
                        padding: 16px 20px;
                    }
                }
            `;
            document.head.appendChild(style);
        }

        // Mobile-specific functions
        function addCustomerMarkerAt(lat, lng) {
            // Implementation for adding customer marker at specific coordinates
            showToast('Fitur tambah customer akan segera tersedia', 'info');
        }

        function getLocationInfo(lat, lng) {
            // Implementation for getting location information
            const coords = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
            showToast(`Koordinat: ${coords}`, 'info');
        }

        function copyCoordinates(lat, lng) {
            const coords = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
            navigator.clipboard.writeText(coords).then(() => {
                showToast('Koordinat berhasil disalin!', 'success');
            }).catch(() => {
                showToast('Gagal menyalin koordinat', 'error');
            });
        }
    </script>
</body>
</html>

