<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cache Management - Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <%- include('../partials/admin-responsive-sidebar', { 
                page: 'cache'
            }) %>
            
            <!-- Main Content -->
            <main class="col-md-10 ms-sm-auto main-content">
                <style>
        .cache-stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .cache-entry {
            border-left: 4px solid #28a745;
            background: #f8f9fa;
            margin-bottom: 10px;
            padding: 15px;
            border-radius: 5px;
        }
        .cache-entry.expired {
            border-left-color: #dc3545;
            background: #fff5f5;
        }
        .cache-entry.warning {
            border-left-color: #ffc107;
            background: #fffbf0;
        }
        .btn-cache-action {
            margin: 2px;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
    </style>

<div class="loading-overlay" id="loadingOverlay">
    <div class="spinner-border text-light" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="fas fa-database"></i> Cache Management</h2>
                    <div>
                        <button class="btn btn-primary" onclick="refreshStats()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="btn btn-danger" onclick="clearAllCache()">
                            <i class="fas fa-trash"></i> Clear All
                        </button>
                    </div>
                </div>

                <!-- Cache Statistics -->
                <div class="row" id="cacheStats">
                    <div class="col-md-3">
                        <div class="cache-stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6>Total Entries</h6>
                                    <h3 id="totalEntries">-</h3>
                                </div>
                                <i class="fas fa-database fa-2x"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="cache-stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6>Valid Entries</h6>
                                    <h3 id="validEntries">-</h3>
                                </div>
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="cache-stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6>Expired Entries</h6>
                                    <h3 id="expiredEntries">-</h3>
                                </div>
                                <i class="fas fa-exclamation-triangle fa-2x"></i>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="cache-stats-card">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6>Memory Usage</h6>
                                    <h3 id="memoryUsage">-</h3>
                                </div>
                                <i class="fas fa-memory fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cache Health Status -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-heartbeat"></i> Cache Health Status</h5>
                            </div>
                            <div class="card-body">
                                <div id="healthStatus">
                                    <div class="alert alert-info">
                                        <i class="fas fa-spinner fa-spin"></i> Loading health status...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cache Entries -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-list"></i> Cache Entries</h5>
                                <div>
                                    <input type="text" class="form-control d-inline-block w-auto" id="searchPattern" placeholder="Search pattern (e.g., genieacs:*)">
                                    <button class="btn btn-outline-primary" onclick="searchEntries()">
                                        <i class="fas fa-search"></i> Search
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="cacheEntries">
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin"></i> Loading cache entries...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentStats = null;
        let currentEntries = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            refreshStats();
            loadCacheEntries();
            loadHealthStatus();
        });

        // Show loading overlay
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        // Hide loading overlay
        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Refresh cache statistics
        async function refreshStats() {
            try {
                showLoading();
                const response = await fetch('/admin/cache/stats');
                const data = await response.json();
                
                if (data.success) {
                    currentStats = data.data;
                    updateStatsDisplay();
                } else {
                    showAlert('Error loading cache stats: ' + data.message, 'danger');
                }
            } catch (error) {
                showAlert('Error loading cache stats: ' + error.message, 'danger');
            } finally {
                hideLoading();
            }
        }

        // Update statistics display
        function updateStatsDisplay() {
            if (!currentStats) return;
            
            document.getElementById('totalEntries').textContent = currentStats.totalEntries;
            document.getElementById('validEntries').textContent = currentStats.validEntries;
            document.getElementById('expiredEntries').textContent = currentStats.expiredEntries;
            document.getElementById('memoryUsage').textContent = currentStats.memoryUsage;
        }

        // Load cache entries
        async function loadCacheEntries(pattern = '*') {
            try {
                const response = await fetch(`/admin/cache/entries?pattern=${encodeURIComponent(pattern)}`);
                const data = await response.json();
                
                if (data.success) {
                    currentEntries = data.data.entries;
                    updateEntriesDisplay();
                } else {
                    showAlert('Error loading cache entries: ' + data.message, 'danger');
                }
            } catch (error) {
                showAlert('Error loading cache entries: ' + error.message, 'danger');
            }
        }

        // Update entries display
        function updateEntriesDisplay() {
            const container = document.getElementById('cacheEntries');
            
            if (currentEntries.length === 0) {
                container.innerHTML = '<div class="text-center text-muted">No cache entries found</div>';
                return;
            }

            let html = '';
            currentEntries.forEach(entry => {
                const isExpired = entry.expiresIn < 0;
                const isWarning = entry.expiresIn < 30000; // Less than 30 seconds
                
                html += `
                    <div class="cache-entry ${isExpired ? 'expired' : (isWarning ? 'warning' : '')}">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <strong>${entry.key}</strong>
                                <br>
                                <small class="text-muted">
                                    Age: ${formatTime(entry.age)} | 
                                    Expires: ${isExpired ? 'Expired' : 'In ' + formatTime(entry.expiresIn)} | 
                                    Size: ${formatBytes(entry.size)}
                                </small>
                            </div>
                            <div class="col-md-6 text-end">
                                <button class="btn btn-sm btn-outline-danger btn-cache-action" onclick="deleteEntry('${entry.key}')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }

        // Load health status
        async function loadHealthStatus() {
            try {
                const response = await fetch('/admin/cache/health');
                const data = await response.json();
                
                if (data.success) {
                    updateHealthDisplay(data.data);
                } else {
                    showAlert('Error loading health status: ' + data.message, 'danger');
                }
            } catch (error) {
                showAlert('Error loading health status: ' + error.message, 'danger');
            }
        }

        // Update health display
        function updateHealthDisplay(health) {
            const container = document.getElementById('healthStatus');
            let statusClass = 'success';
            let statusIcon = 'check-circle';
            
            if (health.status === 'warning') {
                statusClass = 'warning';
                statusIcon = 'exclamation-triangle';
            } else if (health.status === 'error') {
                statusClass = 'danger';
                statusIcon = 'times-circle';
            }

            container.innerHTML = `
                <div class="alert alert-${statusClass}">
                    <i class="fas fa-${statusIcon}"></i> 
                    <strong>Status: ${health.status.toUpperCase()}</strong>
                    ${health.message ? '<br>' + health.message : ''}
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h6>Cache Information</h6>
                        <ul class="list-unstyled">
                            <li><strong>Total Entries:</strong> ${health.cache.totalEntries}</li>
                            <li><strong>Valid Entries:</strong> ${health.cache.validEntries}</li>
                            <li><strong>Expired Entries:</strong> ${health.cache.expiredEntries}</li>
                            <li><strong>Average Age:</strong> ${formatTime(health.cache.averageAge)}</li>
                            <li><strong>Memory Usage:</strong> ${health.cache.memoryUsage}</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>System Information</h6>
                        <ul class="list-unstyled">
                            <li><strong>Heap Used:</strong> ${health.system.heapUsed}MB</li>
                            <li><strong>Heap Total:</strong> ${health.system.heapTotal}MB</li>
                            <li><strong>External:</strong> ${health.system.external}MB</li>
                            <li><strong>RSS:</strong> ${health.system.rss}MB</li>
                            <li><strong>Uptime:</strong> ${formatTime(health.uptime * 1000)}</li>
                        </ul>
                    </div>
                </div>
            `;
        }

        // Search entries
        function searchEntries() {
            const pattern = document.getElementById('searchPattern').value || '*';
            loadCacheEntries(pattern);
        }

        // Delete specific entry
        async function deleteEntry(key) {
            if (!confirm(`Are you sure you want to delete cache entry: ${key}?`)) {
                return;
            }

            try {
                showLoading();
                const response = await fetch(`/admin/cache/entry/${encodeURIComponent(key)}`, {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Cache entry deleted successfully', 'success');
                    refreshStats();
                    loadCacheEntries();
                } else {
                    showAlert('Error deleting cache entry: ' + data.message, 'danger');
                }
            } catch (error) {
                showAlert('Error deleting cache entry: ' + error.message, 'danger');
            } finally {
                hideLoading();
            }
        }

        // Clear all cache
        async function clearAllCache() {
            if (!confirm('Are you sure you want to clear ALL cache entries? This action cannot be undone.')) {
                return;
            }

            try {
                showLoading();
                const response = await fetch('/admin/cache/all', {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                    showAlert(`All cache cleared successfully (${data.cleared} entries)`, 'success');
                    refreshStats();
                    loadCacheEntries();
                } else {
                    showAlert('Error clearing cache: ' + data.message, 'danger');
                }
            } catch (error) {
                showAlert('Error clearing cache: ' + error.message, 'danger');
            } finally {
                hideLoading();
            }
        }

        // Clear service cache
        async function clearServiceCache(service) {
            if (!confirm(`Are you sure you want to clear all cache entries for service: ${service}?`)) {
                return;
            }

            try {
                showLoading();
                const response = await fetch(`/admin/cache/service/${service}`, {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                    showAlert(`Service cache cleared successfully (${data.cleared} entries)`, 'success');
                    refreshStats();
                    loadCacheEntries();
                } else {
                    showAlert('Error clearing service cache: ' + data.message, 'danger');
                }
            } catch (error) {
                showAlert('Error clearing service cache: ' + error.message, 'danger');
            } finally {
                hideLoading();
            }
        }

        // Utility functions
        function formatTime(milliseconds) {
            if (milliseconds < 1000) {
                return milliseconds + 'ms';
            } else if (milliseconds < 60000) {
                return Math.round(milliseconds / 1000) + 's';
            } else if (milliseconds < 3600000) {
                return Math.round(milliseconds / 60000) + 'm';
            } else {
                return Math.round(milliseconds / 3600000) + 'h';
            }
        }

        function formatBytes(bytes) {
            if (bytes < 1024) return bytes + ' B';
            if (bytes < 1048576) return Math.round(bytes / 1024) + ' KB';
            return Math.round(bytes / 1048576) + ' MB';
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.insertBefore(alertDiv, document.body.firstChild);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }
    </script>
            </main>
        </div>
    </div>
</body>
</html>
