<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Admin Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/boxicons@2.0.7/css/boxicons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <style>
        .connection-card {
            transition: transform 0.2s;
            border-left: 4px solid #007bff;
        }
        .connection-card:hover {
            transform: translateY(-2px);
        }
        .connection-active { border-left-color: #28a745; }
        .connection-maintenance { border-left-color: #ffc107; }
        .connection-inactive { border-left-color: #dc3545; }
        .connection-damaged { border-left-color: #6f42c1; }
        
        .topology-container {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            min-height: 400px;
            position: relative;
        }
        
        .odp-node {
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: #007bff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .odp-node:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        }
        
        .odp-node.active { background: #28a745; }
        .odp-node.maintenance { background: #ffc107; }
        .odp-node.inactive { background: #dc3545; }
        
        .connection-line {
            position: absolute;
            height: 2px;
            background: #007bff;
            transform-origin: left center;
            z-index: 1;
        }
        
        .connection-line.active { background: #28a745; }
        .connection-line.maintenance { background: #ffc107; }
        .connection-line.inactive { background: #dc3545; }
        
        .connection-info {
            position: absolute;
            background: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.8rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            z-index: 2;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/admin">
                <i class="bx bx-wifi"></i> Admin Portal
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin">
                    <i class="bx bx-home"></i> Dashboard
                </a>
                <a class="nav-link" href="/admin/cable-network">
                    <i class="bx bx-network-chart"></i> Cable Network
                </a>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="bx bx-network-chart me-2"></i>ODP Backbone Connections</h2>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addConnectionModal">
                        <i class="bx bx-plus"></i> Add Connection
                    </button>
                </div>

                <!-- Filter dan Search -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <select class="form-select" id="statusFilter">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="inactive">Inactive</option>
                            <option value="damaged">Damaged</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="typeFilter">
                            <option value="">All Types</option>
                            <option value="fiber">Fiber</option>
                            <option value="copper">Copper</option>
                            <option value="wireless">Wireless</option>
                            <option value="microwave">Microwave</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <input type="text" class="form-control" id="searchInput" placeholder="Search connections...">
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                            <i class="bx bx-x"></i> Clear
                        </button>
                    </div>
                </div>

                <!-- Network Topology Visualization -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bx bx-network-chart me-2"></i>Network Topology</h5>
                    </div>
                    <div class="card-body">
                        <div class="topology-container" id="topologyContainer">
                            <!-- ODP nodes dan connections akan di-render di sini -->
                        </div>
                    </div>
                </div>

                <!-- Connections List -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bx bx-list-ul me-2"></i>Backbone Connections</h5>
                    </div>
                    <div class="card-body">
                        <div class="row" id="connectionsList">
                            <% if (connections && connections.length > 0) { %>
                                <% connections.forEach(connection => { %>
                                <div class="col-md-6 col-lg-4 mb-3 connection-item" 
                                     data-status="<%= connection.status %>" 
                                     data-type="<%= connection.connection_type %>"
                                     data-from="<%= connection.from_odp_name %>"
                                     data-to="<%= connection.to_odp_name %>">
                                    <div class="card connection-card connection-<%= connection.status %>">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-3">
                                                <h6 class="mb-0">Connection #<%= connection.id %></h6>
                                                <span class="badge <%= 
                                                    connection.status === 'active' ? 'bg-success' :
                                                    connection.status === 'maintenance' ? 'bg-warning' :
                                                    connection.status === 'inactive' ? 'bg-danger' : 'bg-secondary'
                                                %>">
                                                    <%= connection.status.charAt(0).toUpperCase() + connection.status.slice(1) %>
                                                </span>
                                            </div>

                                            <div class="mb-3">
                                                <small class="text-muted d-block">From ODP</small>
                                                <h6 class="mb-1"><%= connection.from_odp_name %></h6>
                                                <small class="text-muted"><%= connection.from_odp_code %></small>
                                            </div>

                                            <div class="mb-3">
                                                <small class="text-muted d-block">To ODP</small>
                                                <h6 class="mb-1"><%= connection.to_odp_name %></h6>
                                                <small class="text-muted"><%= connection.to_odp_code %></small>
                                            </div>

                                            <div class="row text-center mb-3">
                                                <div class="col-4">
                                                    <h6 class="mb-0 text-primary"><%= connection.connection_type %></h6>
                                                    <small class="text-muted">Type</small>
                                                </div>
                                                <div class="col-4">
                                                    <h6 class="mb-0 text-info"><%= connection.cable_length ? connection.cable_length + 'm' : 'N/A' %></h6>
                                                    <small class="text-muted">Length</small>
                                                </div>
                                                <div class="col-4">
                                                    <h6 class="mb-0 text-success"><%= connection.cable_capacity %></h6>
                                                    <small class="text-muted">Capacity</small>
                                                </div>
                                            </div>

                                            <div class="d-flex justify-content-end">
                                                <button class="btn btn-sm btn-outline-primary me-2" onclick="editConnection(<%= connection.id %>)">
                                                    <i class="bx bx-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" onclick="deleteConnection(<%= connection.id %>)">
                                                    <i class="bx bx-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <% }); %>
                            <% } else { %>
                                <div class="col-12 text-center py-5">
                                    <i class="bx bx-network-chart display-1 text-muted"></i>
                                    <h5 class="mt-3 text-muted">No Backbone Connections</h5>
                                    <p class="text-muted">Start by adding connections between ODPs</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Connection Modal -->
    <div class="modal fade" id="addConnectionModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add ODP Connection</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addConnectionForm">
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="fromOdp" class="form-label">From ODP</label>
                                    <select class="form-select" id="fromOdp" name="from_odp_id" required>
                                        <option value="">Select ODP</option>
                                        <% if (odps) { %>
                                            <% odps.forEach(odp => { %>
                                                <option value="<%= odp.id %>"><%= odp.name %> (<%= odp.code %>)</option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="toOdp" class="form-label">To ODP</label>
                                    <select class="form-select" id="toOdp" name="to_odp_id" required>
                                        <option value="">Select ODP</option>
                                        <% if (odps) { %>
                                            <% odps.forEach(odp => { %>
                                                <option value="<%= odp.id %>"><%= odp.name %> (<%= odp.code %>)</option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="connectionType" class="form-label">Connection Type</label>
                                    <select class="form-select" id="connectionType" name="connection_type" required>
                                        <option value="fiber">Fiber Optic</option>
                                        <option value="copper">Copper</option>
                                        <option value="wireless">Wireless</option>
                                        <option value="microwave">Microwave</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="cableCapacity" class="form-label">Cable Capacity</label>
                                    <select class="form-select" id="cableCapacity" name="cable_capacity" required>
                                        <option value="100M">100 Mbps</option>
                                        <option value="1G" selected>1 Gbps</option>
                                        <option value="10G">10 Gbps</option>
                                        <option value="100G">100 Gbps</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="cableLength" class="form-label">Cable Length (meters)</label>
                                    <input type="number" class="form-control" id="cableLength" name="cable_length" placeholder="100" min="1">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="status" class="form-label">Status</label>
                                    <select class="form-select" id="status" name="status" required>
                                        <option value="active" selected>Active</option>
                                        <option value="maintenance">Maintenance</option>
                                        <option value="inactive">Inactive</option>
                                        <option value="damaged">Damaged</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="installationDate" class="form-label">Installation Date</label>
                            <input type="date" class="form-control" id="installationDate" name="installation_date">
                        </div>

                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="usePolesSwitch">
                            <label class="form-check-label" for="usePolesSwitch">Gunakan Tiang (waypoints)</label>
                        </div>

                        <div class="mb-3" id="polesSection" style="display:none;">
                            <label class="form-label">Waypoints (GeoJSON polyline)</label>
                            <textarea class="form-control" id="polylineGeoJson" name="polyline_geojson" rows="3" placeholder='Contoh: { "type": "LineString", "coordinates": [[106.8,-6.2],[106.81,-6.21]] }'></textarea>
                            <div class="form-text">Opsional: masukkan koordinat polyline hasil pemilihan tiang. Jika kosong, sistem akan menggunakan garis lurus.</div>

                            <div class="card mt-3">
                                <div class="card-header d-flex align-items-center justify-content-between">
                                    <span><i class="bx bx-map me-1"></i>Pilih Tiang di Peta (klik untuk tambah titik)</span>
                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn btn-sm btn-outline-secondary" id="fitOdpBtn"><i class="bx bx-target-lock"></i> Fit ODP</button>
                                        <button type="button" class="btn btn-sm btn-outline-warning" id="undoPointBtn"><i class="bx bx-undo"></i> Undo</button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" id="clearPointsBtn"><i class="bx bx-trash"></i> Clear</button>
                                        <button type="button" class="btn btn-sm btn-outline-primary" id="savePolylineBtn"><i class="bx bx-save"></i> Gunakan Jalur</button>
                                    </div>
                                </div>
                                <div class="card-body p-2">
                                    <div id="waypointsMap" style="height: 300px; border-radius: 8px;"></div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes</label>
                            <textarea class="form-control" id="notes" name="notes" rows="3" placeholder="Additional notes about this connection..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Add Connection</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Connection Modal -->
    <div class="modal fade" id="editConnectionModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit ODP Connection</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="editConnectionForm">
                    <input type="hidden" id="editConnectionId" name="id">
                    <div class="modal-body">
                        <!-- Same fields as add modal -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editFromOdp" class="form-label">From ODP</label>
                                    <select class="form-select" id="editFromOdp" name="from_odp_id" required>
                                        <option value="">Select ODP</option>
                                        <% if (odps) { %>
                                            <% odps.forEach(odp => { %>
                                                <option value="<%= odp.id %>"><%= odp.name %> (<%= odp.code %>)</option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editToOdp" class="form-label">To ODP</label>
                                    <select class="form-select" id="editToOdp" name="to_odp_id" required>
                                        <option value="">Select ODP</option>
                                        <% if (odps) { %>
                                            <% odps.forEach(odp => { %>
                                                <option value="<%= odp.id %>"><%= odp.name %> (<%= odp.code %>)</option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editConnectionType" class="form-label">Connection Type</label>
                                    <select class="form-select" id="editConnectionType" name="connection_type" required>
                                        <option value="fiber">Fiber Optic</option>
                                        <option value="copper">Copper</option>
                                        <option value="wireless">Wireless</option>
                                        <option value="microwave">Microwave</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editCableCapacity" class="form-label">Cable Capacity</label>
                                    <select class="form-select" id="editCableCapacity" name="cable_capacity" required>
                                        <option value="100M">100 Mbps</option>
                                        <option value="1G">1 Gbps</option>
                                        <option value="10G">10 Gbps</option>
                                        <option value="100G">100 Gbps</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editCableLength" class="form-label">Cable Length (meters)</label>
                                    <input type="number" class="form-control" id="editCableLength" name="cable_length" placeholder="100" min="1">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="editStatus" class="form-label">Status</label>
                                    <select class="form-select" id="editStatus" name="status" required>
                                        <option value="active">Active</option>
                                        <option value="maintenance">Maintenance</option>
                                        <option value="inactive">Inactive</option>
                                        <option value="damaged">Damaged</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="editInstallationDate" class="form-label">Installation Date</label>
                            <input type="date" class="form-control" id="editInstallationDate" name="installation_date">
                        </div>

                        <div class="mb-3">
                            <label for="editNotes" class="form-label">Notes</label>
                            <textarea class="form-control" id="editNotes" name="notes" rows="3" placeholder="Additional notes about this connection..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Update Connection</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        // Filter dan Search
        document.getElementById('statusFilter').addEventListener('change', filterConnections);
        document.getElementById('typeFilter').addEventListener('change', filterConnections);
        document.getElementById('searchInput').addEventListener('input', filterConnections);

        function filterConnections() {
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const searchInput = document.getElementById('searchInput').value.toLowerCase();

            const connections = document.querySelectorAll('.connection-item');
            
            connections.forEach(connection => {
                const status = connection.dataset.status;
                const type = connection.dataset.type;
                const from = connection.dataset.from.toLowerCase();
                const to = connection.dataset.to.toLowerCase();
                
                const statusMatch = !statusFilter || status === statusFilter;
                const typeMatch = !typeFilter || type === typeFilter;
                const searchMatch = !searchInput || from.includes(searchInput) || to.includes(searchInput);
                
                if (statusMatch && typeMatch && searchMatch) {
                    connection.style.display = 'block';
                } else {
                    connection.style.display = 'none';
                }
            });
        }

        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('typeFilter').value = '';
            document.getElementById('searchInput').value = '';
            filterConnections();
        }

        // Add Connection Form
        document.getElementById('usePolesSwitch').addEventListener('change', function(){
            document.getElementById('polesSection').style.display = this.checked ? 'block' : 'none';
            if (this.checked) {
                setTimeout(initWaypointsMap, 0);
            }
        });

        document.getElementById('addConnectionForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());
            // Validate optional polyline JSON if provided
            if (data.polyline_geojson) {
                try { JSON.parse(data.polyline_geojson); }
                catch(_) { return alert('Polyline GeoJSON tidak valid'); }
            }
            
            try {
                const response = await fetch('/admin/cable-network/api/odp-connections', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        });

        // Edit Connection
        function editConnection(id) {
            // Implement edit functionality
            console.log('Edit connection:', id);
        }

        // Delete Connection
        function deleteConnection(id) {
            if (confirm('Are you sure you want to delete this connection?')) {
                // Implement delete functionality
                console.log('Delete connection:', id);
            }
        }

        // Render Network Topology
        function renderTopology() {
            const container = document.getElementById('topologyContainer');
            const connections = <%- JSON.stringify(connections || []) %>;
            const odps = <%- JSON.stringify(odps || []) %>;
            
            // Clear container
            container.innerHTML = '';
            
            if (odps.length === 0) return;
            
            // Calculate positions for ODP nodes
            const positions = calculateNodePositions(odps.length);
            
            // Render ODP nodes
            odps.forEach((odp, index) => {
                const node = document.createElement('div');
                node.className = `odp-node ${odp.status || 'active'}`;
                node.style.left = positions[index].x + 'px';
                node.style.top = positions[index].y + 'px';
                node.textContent = odp.code || `ODP${odp.id}`;
                node.title = `${odp.name} (${odp.code})`;
                container.appendChild(node);
            });
            
            // Render connections
            connections.forEach(connection => {
                const fromOdp = odps.find(odp => odp.id === connection.from_odp_id);
                const toOdp = odps.find(odp => odp.id === connection.to_odp_id);
                
                if (fromOdp && toOdp) {
                    const fromIndex = odps.findIndex(odp => odp.id === connection.from_odp_id);
                    const toIndex = odps.findIndex(odp => odp.id === connection.to_odp_id);
                    
                    const fromPos = positions[fromIndex];
                    const toPos = positions[toIndex];
                    
                    // Create connection line
                    const line = document.createElement('div');
                    line.className = `connection-line ${connection.status}`;
                    
                    const length = Math.sqrt(Math.pow(toPos.x - fromPos.x, 2) + Math.pow(toPos.y - fromPos.y, 2));
                    const angle = Math.atan2(toPos.y - fromPos.y, toPos.x - fromPos.x) * 180 / Math.PI;
                    
                    line.style.width = length + 'px';
                    line.style.left = (fromPos.x + 30) + 'px';
                    line.style.top = (fromPos.y + 30) + 'px';
                    line.style.transform = `rotate(${angle}deg)`;
                    
                    container.appendChild(line);
                    
                    // Add connection info
                    const info = document.createElement('div');
                    info.className = 'connection-info';
                    info.style.left = ((fromPos.x + toPos.x) / 2) + 'px';
                    info.style.top = ((fromPos.y + toPos.y) / 2 - 20) + 'px';
                    info.textContent = `${connection.connection_type} ${connection.cable_capacity}`;
                    container.appendChild(info);
                }
            });
        }

        function calculateNodePositions(count) {
            const positions = [];
            const centerX = 200;
            const centerY = 200;
            const radius = 150;
            
            for (let i = 0; i < count; i++) {
                const angle = (2 * Math.PI * i) / count;
                const x = centerX + radius * Math.cos(angle);
                const y = centerY + radius * Math.sin(angle);
                positions.push({ x, y });
            }
            
            return positions;
        }

        // Initialize topology on page load
        document.addEventListener('DOMContentLoaded', renderTopology);

        // Waypoints map logic (Leaflet)
        let wmap, waypoints = [], wpolyline;
        function initWaypointsMap(){
            if (wmap) return;
            wmap = L.map('waypointsMap');
            const odps = <%- JSON.stringify(odps || []) %>;
            const fromSel = document.getElementById('fromOdp');
            const toSel = document.getElementById('toOdp');
            const getOdpCoord = (id) => {
                const o = odps.find(x => String(x.id) === String(id));
                return o && o.latitude && o.longitude ? [Number(o.latitude), Number(o.longitude)] : null;
            };
            const fallback = [-6.2,106.8];
            const fromCoord = getOdpCoord(fromSel.value) || fallback;
            wmap.setView(fromCoord, 14);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '© OpenStreetMap contributors' }).addTo(wmap);
            wpolyline = L.polyline([], { color: '#1d4ed8', weight: 4 }).addTo(wmap);

            // Click to add point
            wmap.on('click', (e) => {
                waypoints.push([e.latlng.lat, e.latlng.lng]);
                redrawPolyline();
            });

            // Fit to ODPs
            document.getElementById('fitOdpBtn').addEventListener('click', () => {
                const a = getOdpCoord(fromSel.value);
                const b = getOdpCoord(toSel.value);
                if (a && b) {
                    const bounds = L.latLngBounds([a, b]);
                    wmap.fitBounds(bounds.pad(0.3));
                }
            });

            // Undo / Clear
            document.getElementById('undoPointBtn').addEventListener('click', () => {
                waypoints.pop();
                redrawPolyline();
            });
            document.getElementById('clearPointsBtn').addEventListener('click', () => {
                waypoints = [];
                redrawPolyline();
            });

            // Save to textarea as GeoJSON LineString with order: fromODP -> waypoints -> toODP
            document.getElementById('savePolylineBtn').addEventListener('click', () => {
                const a = getOdpCoord(fromSel.value);
                const b = getOdpCoord(toSel.value);
                if (!a || !b) return alert('Pilih From/To ODP terlebih dahulu');
                // GeoJSON expects [lng,lat]
                const coords = [a, ...waypoints, b].map(p => [Number(p[1]), Number(p[0])]);
                const gj = { type: 'LineString', coordinates: coords };
                document.getElementById('polylineGeoJson').value = JSON.stringify(gj);
                alert('Jalur tersimpan dari peta.');
            });

            function redrawPolyline(){
                const a = getOdpCoord(fromSel.value);
                const b = getOdpCoord(toSel.value);
                const pts = [];
                if (a) pts.push(a);
                pts.push(...waypoints);
                if (b) pts.push(b);
                wpolyline.setLatLngs(pts);
                if (pts.length >= 2) wmap.fitBounds(L.latLngBounds(pts).pad(0.2));
            }

            // Update preview when ODP select changes
            fromSel.addEventListener('change', () => { waypoints = []; redrawPolyline(); });
            toSel.addEventListener('change', () => { waypoints = []; redrawPolyline(); });
        }
    </script>
</body>
</html>
